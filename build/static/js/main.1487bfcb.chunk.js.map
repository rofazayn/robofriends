{"version":3,"sources":["components/Search.js","components/Robot.js","components/Robots.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Search","_ref","searchChange","react_default","a","createElement","className","type","placeholder","aria-label","onChange","Robot","id","name","email","alt","src","concat","Robots","robotsArray","robots","map","robot","i","key","App","this","props","onRequestRobots","console","log","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","Component","connect","state","search","requestRobots","error","dispatch","e","payload","target","value","fetch","then","res","json","data","catch","initialStateSearch","initialStateRobots","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1487bfcb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Search({ searchChange }) {\r\n  return (\r\n    <div className='search'>\r\n      <input\r\n        type='search'\r\n        placeholder='Who are you looking for?'\r\n        aria-label='search'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Robot({ id, name, email }) {\r\n  return (\r\n    <div className='robot'>\r\n      <img alt='Robot' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Robot from './Robot';\r\n\r\nexport default function Robots({ robots }) {\r\n  const robotsArray = robots.map((robot, i) => {\r\n    return (\r\n      <Robot key={i} id={robot.id} name={robot.name} email={robot.email} />\r\n    );\r\n  });\r\n\r\n  return <div className='robots'>{robotsArray}</div>;\r\n}\r\n","import React, { Component } from 'react';\r\nimport Search from '../components/Search';\r\nimport Robots from '../components/Robots';\r\n\r\n// Redux connect\r\nimport { connect } from 'react-redux';\r\n\r\n// Sass\r\nimport '../assets/style.scss';\r\n\r\n// Redux actions\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.search.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: e => dispatch(setSearchField(e.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n    console.log(this.props.robots);\r\n  }\r\n\r\n  render() {\r\n    const { robots, searchField, onSearchChange, isPending } = this.props;\r\n\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    return (\r\n      <div className='app'>\r\n        <Search searchChange={onSearchChange} />\r\n        {isPending ? <div>Loading..</div> : <Robots robots={filteredRobots} />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(res => res.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n};\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n};\r\n\r\nexport const search = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  robots: [],\r\n  isPending: true,\r\n  error: ''\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: true\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\n\n// Redux\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\n// Redux reducer\nimport { search, requestRobots } from './reducers';\n\nimport * as serviceWorker from './serviceWorker';\n\n// Initiate the logger\nconst logger = createLogger();\n\n// Combine the reducers\nconst rootReducer = combineReducers({ search, requestRobots });\n\n// Initialize the store\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}